/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.currencyconverter;

import javax.swing.JOptionPane;

/**
 *
 * @author alan
 */
public class UI extends javax.swing.JFrame {

    /**
     * Creates new form MainUI
     */
    Dollar dollar = new Dollar();
    JapaneseYen yen = new JapaneseYen();
    Euro euro = new Euro();
    Pound pound = new Pound();
    Won won = new Won();

    Double cantidad, conversion, grados, tmpConversion;
    String unitValue, unidades, tmpFrom, tmpTo, gradosFrom, gradosTo;

    public UI() {
        initComponents();
        cmbFromCurrency.addItem("Pesos Mexicanos");
        cmbFromCurrency.addItem("Dolares");
        cmbFromCurrency.addItem("Euros");
        cmbFromCurrency.addItem("Libras Esterlinas");
        cmbFromCurrency.addItem("Yenes Japoneses");
        cmbFromCurrency.addItem("Wones Sul-coreanos");

        cmbFromCurrency.setSelectedIndex(1);

        cmbFromTemperature.addItem("Celsius");
        cmbFromTemperature.addItem("Fahrenheit");
        cmbFromTemperature.addItem("Kelvin");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtImporte = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmbFromCurrency = new javax.swing.JComboBox<>();
        cmbToCurrency = new javax.swing.JComboBox<>();
        lblResult1 = new javax.swing.JLabel();
        lblResult2 = new javax.swing.JLabel();
        lblResult3 = new javax.swing.JLabel();
        btnConvertir = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtGrados = new javax.swing.JTextField();
        cmbFromTemperature = new javax.swing.JComboBox<>();
        cmbToTemperature = new javax.swing.JComboBox<>();
        btnConvertirTemperatura = new javax.swing.JButton();
        lblResultadoTemperatura = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Conversor de Unidades");
        setBackground(new java.awt.Color(248, 249, 250));
        setFont(new java.awt.Font("SansSerif", 0, 10)); // NOI18N

        jTabbedPane1.setBackground(new java.awt.Color(248, 249, 250));
        jTabbedPane1.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N

        jPanel1.setBackground(new java.awt.Color(248, 249, 250));

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel1.setText("Importe:");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel2.setText("De: ");

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel3.setText("A:");

        cmbFromCurrency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFromCurrencyActionPerformed(evt);
            }
        });

        lblResult1.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N

        lblResult2.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N

        btnConvertir.setBackground(new java.awt.Color(37, 114, 251));
        btnConvertir.setForeground(new java.awt.Color(255, 255, 255));
        btnConvertir.setText("Convertir");
        btnConvertir.setBorderPainted(false);
        btnConvertir.setOpaque(true);
        btnConvertir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConvertirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblResult1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(120, 120, 120))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(txtImporte)
                                        .addGap(40, 40, 40)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbFromCurrency, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(41, 41, 41)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(cmbToCurrency, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(8, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblResult2)
                            .addComponent(lblResult3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnConvertir, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(86, 86, 86))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtImporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbFromCurrency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbToCurrency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(lblResult1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnConvertir, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblResult2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblResult3)))
                .addContainerGap(94, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Conversor de Moneda", jPanel1);

        jPanel2.setBackground(new java.awt.Color(248, 249, 250));

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel7.setText("Grados:");
        jLabel7.setLocation(new java.awt.Point(-32738, -32698));

        jLabel8.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel8.setText("De:");

        jLabel9.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel9.setText("A:");

        txtGrados.setLocation(new java.awt.Point(-32751, -32678));

        cmbFromTemperature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFromTemperatureActionPerformed(evt);
            }
        });

        btnConvertirTemperatura.setText("Convertir");
        btnConvertirTemperatura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConvertirTemperaturaActionPerformed(evt);
            }
        });

        lblResultadoTemperatura.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(txtGrados, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(cmbFromTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblResultadoTemperatura))
                .addGap(56, 75, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(btnConvertirTemperatura)
                        .addGap(82, 82, 82))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(cmbToTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtGrados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbFromTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbToTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(104, 104, 104)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConvertirTemperatura)
                    .addComponent(lblResultadoTemperatura))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Conversor de Temperatura", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbFromCurrencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFromCurrencyActionPerformed
        // TODO add your handling code here:
        
        if (cmbFromCurrency.getSelectedItem().equals("Pesos Mexicanos")) {
            cmbToCurrency.removeAllItems();
            cmbToCurrency.addItem("Dolares");
            cmbToCurrency.addItem("Euros");
            cmbToCurrency.addItem("Libras Esterlinas");
            cmbToCurrency.addItem("Yenes Japoneses");
            cmbToCurrency.addItem("Wones Sul-coreanos");
        } else {
            cmbToCurrency.removeAllItems();
            cmbToCurrency.addItem("Pesos Mexicanos");
        }
    }//GEN-LAST:event_cmbFromCurrencyActionPerformed

    private void btnConvertirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConvertirActionPerformed
        // TODO add your handling code here:
        String input = txtImporte.getText();

        if (input.length() < 1) {
            JOptionPane.showMessageDialog(null, "La entrada no puede estar vacía.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            /*
            int contador = 0;
            for (int x = 0; x < input.length(); x++) {
                if (!Character.isDigit(input.charAt(x))) {
                    if (input.charAt(x) == '.') {
                        contador++;
                    } else {
                        contador = 2;
                        break;
                    }
                }
            }*/
            if (!validarEntradaCurrency(input)) {
                JOptionPane.showMessageDialog(null, "Entrada inválida. Sólo se aceptan números enteros y decimales", "Error", JOptionPane.ERROR_MESSAGE);
                txtImporte.setText("");
            } else {
                cantidad = Double.parseDouble(input);

                if (cmbFromCurrency.getSelectedItem().toString().equals("Pesos Mexicanos")) {

                    if (cantidad > 1) {
                        unidades = "Pesos Mexicanos";
                    } else {
                        unidades = "Peso Mexicano";
                    }

                    switch (cmbToCurrency.getSelectedItem().toString()) {
                        case "Dolares":
                            conversion = dollar.fromPesos(cantidad);
                            unitValue = "1 " + dollar.currencyCode + " = " + dollar.value + " MXN";

                            break;

                        case "Euros":
                            conversion = euro.fromPesos(cantidad);
                            unitValue = "1 " + euro.currencyCode + " = " + euro.value + " MXN";

                            break;

                        case "Libras Esterlinas":
                            conversion = pound.fromPesos(cantidad);
                            unitValue = "1 " + pound.currencyCode + " = " + pound.value + " MXN";

                            break;

                        case "Yenes Japoneses":
                            conversion = yen.fromPesos(cantidad);
                            unitValue = "1 " + yen.currencyCode + " = " + yen.value + " MXN";

                            break;

                        case "Wones Sul-coreanos":
                            conversion = won.fromPesos(cantidad);
                            unitValue = "1 " + won.currencyCode + " = " + won.value + " MXN";

                            break;

                    }
                } else {
                    switch (cmbFromCurrency.getSelectedItem().toString()) {
                        case "Dolares":
                            conversion = dollar.toPesos(cantidad);
                            unitValue = "1 " + dollar.currencyCode + " = " + dollar.value + " MXN";

                            if (cantidad > 1) {
                                unidades = "Dolares";
                            } else {
                                unidades = "Dolar";
                            }
                            break;
                        case "Euros":
                            conversion = euro.toPesos(cantidad);
                            unitValue = "1 " + euro.currencyCode + " = " + euro.value + " MXN";

                            if (cantidad > 1) {
                                unidades = "Euros";
                            } else {
                                unidades = "Euro";
                            }
                            break;

                        case "Libras Esterlinas":
                            conversion = pound.toPesos(cantidad);
                            unitValue = "1 " + pound.currencyCode + " = " + pound.value + " MXN";

                            if (cantidad > 1) {
                                unidades = "Libras Esterlinas";
                            } else {
                                unidades = "Libra Esterlina";
                            }
                            break;

                        case "Yenes Japoneses":
                            conversion = yen.toPesos(cantidad);
                            unitValue = "1 " + yen.currencyCode + " = " + yen.value + " MXN";

                            if (cantidad > 1) {
                                unidades = "Yenes Japoneses";
                            } else {
                                unidades = "Yen Japonés";
                            }
                            break;

                        case "Wones Sul-coreanos":
                            conversion = won.toPesos(cantidad);
                            unitValue = "1 " + won.currencyCode + " = " + won.value + " MXN";

                            if (cantidad > 1) {
                                unidades = "Won Sul-coreanos";
                            } else {
                                unidades = "Won Sul-coreano";
                            }
                            break;

                    }
                }

                lblResult1.setText(input + " " + unidades + " =");
                lblResult2.setText(Double.toString(Math.round(conversion * 100) / 100.0) + " " + cmbToCurrency.getSelectedItem().toString());
                lblResult3.setText(unitValue);

                txtImporte.setText("");
            }
        }
    }//GEN-LAST:event_btnConvertirActionPerformed

    private void cmbFromTemperatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFromTemperatureActionPerformed
        // TODO add your handling code here:
        cmbToTemperature.removeAllItems();
        switch (cmbFromTemperature.getSelectedItem().toString()) {
            case "Celsius":
                cmbToTemperature.addItem("Fahrenheit");
                cmbToTemperature.addItem("Kelvin");
                break;

            case "Fahrenheit":
                cmbToTemperature.addItem("Celsius");
                cmbToTemperature.addItem("Kelvin");
                break;
            case "Kelvin":
                cmbToTemperature.addItem("Celsius");
                cmbToTemperature.addItem("Fahrenheit");
                break;

        }

        //cmbToCurrency.removeAllItems();
    }//GEN-LAST:event_cmbFromTemperatureActionPerformed

    private void btnConvertirTemperaturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConvertirTemperaturaActionPerformed
        // TODO add your handling code here:

        String input = txtGrados.getText();

        if (input.length() < 1) {
            JOptionPane.showMessageDialog(null, "La entrada no puede estar vacía.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            if (!validarEntradaTemperature(input)) {
                JOptionPane.showMessageDialog(null, "Entrada inválida. Sólo se aceptan números enteros y decimales", "Error", JOptionPane.ERROR_MESSAGE);
                txtImporte.setText("");
            } else {
                grados = Double.parseDouble(input);

                tmpFrom = cmbFromTemperature.getSelectedItem().toString();
                tmpTo = cmbToTemperature.getSelectedItem().toString();

                if (tmpFrom.equals("Celsius")) {

                    gradosFrom = "ºC";

                    switch (tmpTo) {
                        case "Fahrenheit":
                            tmpConversion = Temperature.celsiusToFahrenheit(grados);
                            gradosTo = "ºF";
                            break;

                        case "Kelvin":
                            tmpConversion = Temperature.celsiusToKelvin(grados);
                            gradosTo = "ºK";
                            break;
                    }
                }

                if (tmpFrom.equals("Fahrenheit")) {
                    gradosFrom = "ºF";

                    switch (tmpTo) {
                        case "Celsius":
                            tmpConversion = Temperature.fahrenheitToCelsius(grados);
                            gradosTo = "ºC";
                            break;

                        case "Kelvin":
                            tmpConversion = Temperature.fahrenheitToKelvin(grados);
                            gradosTo = "ºK";
                            break;
                    }
                }

                if (tmpFrom.equals("Kelvin")) {
                    gradosFrom = "ºF";

                    switch (tmpTo) {
                        case "Celsius":
                            tmpConversion = Temperature.kelvinToCelsius(grados);
                            gradosTo = "ºC";
                            break;

                        case "Fahrenheit":
                            tmpConversion = Temperature.kelvinToFahrenheit(grados);
                            gradosTo = "ºF";
                            break;
                    }
                }

                lblResultadoTemperatura.setText(Double.toString(Math.round(grados * 100) / 100.0) + " " + gradosFrom + " = " + Double.toString(Math.round(tmpConversion * 100) / 100.0) + " " + gradosTo);
                txtGrados.setText("");
            }

        }
    }//GEN-LAST:event_btnConvertirTemperaturaActionPerformed

    boolean validarEntradaCurrency(String input) {
        int contador = 0;
        for (int x = 0; x < input.length(); x++) {
            if (!Character.isDigit(input.charAt(x))) {
                if (input.charAt(x) == '.') {
                    contador++;
                } else {
                    contador = 2;
                    break;
                }
            }
        }
        return contador <= 1;
    }

    boolean validarEntradaTemperature(String input) {
        int contadorPuntos = 0, contadorSignos = 0;
        boolean entradaInvalida = false;
        for (int x = 0; x < input.length(); x++) {
            if (!Character.isDigit(input.charAt(x))) {
                if (input.charAt(x) == '.') {
                    contadorPuntos++;
                } else {
                    if (input.charAt(x) == '-') {
                        contadorSignos++;
                    } else {
                        entradaInvalida = true;
                        break;
                    }

                }
            }
        }
        return !(contadorPuntos > 1 || contadorSignos > 1 || entradaInvalida);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConvertir;
    private javax.swing.JButton btnConvertirTemperatura;
    private javax.swing.JComboBox<String> cmbFromCurrency;
    private javax.swing.JComboBox<String> cmbFromTemperature;
    private javax.swing.JComboBox<String> cmbToCurrency;
    private javax.swing.JComboBox<String> cmbToTemperature;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblResult1;
    private javax.swing.JLabel lblResult2;
    private javax.swing.JLabel lblResult3;
    private javax.swing.JLabel lblResultadoTemperatura;
    private javax.swing.JTextField txtGrados;
    private javax.swing.JTextField txtImporte;
    // End of variables declaration//GEN-END:variables

}
